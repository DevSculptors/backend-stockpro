// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum type_doc_domain {
  CC
  CE
  NIT
  TI
  PP
}

model Person{
  id Int @id @default(autoincrement())
  id_document String
  type_document type_doc_domain 
  name String
  last_name String
  phone String
  email String
  user User[]
  sales Sale[]
  inventory_purchases Inventory_Purchase[]
}

model User{
  id Int @id @default(autoincrement())
  username String @unique
  password String
  isActive Boolean @default(true)
  person Person @relation(fields: [personId], references:  [id])
  personId Int
  roles_user Role_User[]
  turns Turn[]
  sales Sale[]
  inventory_purchases Inventory_Purchase[]
}

model Role{
  id Int @id @default(autoincrement())
  name String
  description String
  roles_user Role_User[] 
}

model Role_User{
  id Int @id @default(autoincrement())
  user User @relation(fields: [id_user], references: [id])
  id_user Int
  role Role @relation(fields: [id_role], references: [id])
  id_role Int
}

model Turn {
  id Int @id @default(autoincrement())
  date_time DateTime
  cash Decimal
  is_open Boolean
  withdrawals Withdrawal[]
  user User @relation(fields: [id_user], references: [id])
  id_user Int
  cash_register Cash_Register @relation(fields: [id_cash_register], references: [id])
  id_cash_register Int
}

model Withdrawal{
  id Int @id @default(autoincrement())
  turn Turn @relation(fields: [id_turn], references: [id])
  id_turn Int 
  withdrawal_date DateTime
  value Decimal
}

model Cash_Register{
  id Int @id @default(autoincrement())
  name String
  location String
  turns Turn[]
}

model Sale{
  id Int @id @default(autoincrement())
  date_sale DateTime
  price_sale Decimal
  person Person @relation(fields: [id_client], references: [id])
  id_client Int
  user User @relation(fields: [id_user], references: [id])
  id_user Int
  oders Order_Sale []
}

model Product{
  id Int @id @default(autoincrement())
  name_product String
  description String
  measure_unit Measure
  sale_price Decimal
  stock Int
  category Category_Product @relation(fields: [id_category], references: [id])
  id_category Int
  brand Brand_product @relation(fields: [id_brand], references: [id])
  id_brand Int
  oders Order_Sale []
  purchases Purchase_Detail []
  sales_records Sale_Record[]
}

model Order_Sale{
  id Int @id @default(autoincrement())
  amount_product Int
  price Decimal
  product Product @relation(fields: [id_product], references: [id])
  id_product Int
  sale Sale @relation(fields: [id_sale], references: [id])
  id_sale Int
}

enum Measure {
  KG
  UNITS
  LITERS
  POUNDS
}

model Inventory_Purchase{
  id Int @id @default(autoincrement())
  date_purchase DateTime
  person Person @relation(fields: [id_provider], references: [id])
  id_provider Int
  user User @relation(fields: [id_user], references: [id])
  id_user Int
  purchase_detail Purchase_Detail[]
  sale_records Sale_Record[]
}

model Purchase_Detail{
  id Int @id @default(autoincrement())
  quantity Int
  due_date DateTime
  purchase_unit_price Decimal
  inventory_purchase Inventory_Purchase @relation(fields: [id_purchase], references: [id])
  id_purchase Int
  product Product @relation(fields: [id_product], references: [id])
  id_product Int
}

model Sale_Record{
  id Int @id @default(autoincrement())
  sale_price Decimal
  update_date DateTime
  inventory_purchase Inventory_Purchase @relation(fields: [id_purchase], references: [id])
  id_purchase Int
  product Product @relation(fields: [id_product], references: [id]) 
  id_product Int
}

model Brand_product{
  id Int @id @default(autoincrement())
  name String
  is_active Boolean @default(true)
  description String
  products Product[]
}

model Category_Product{
  id Int @id @default(autoincrement())
  name String
  is_active Boolean @default(true)
  description String
  products Product[]
}

